plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.9.0'
    id 'org.jetbrains.kotlin.plugin.serialization' version '1.9.0'

    id 'net.mamoe.mirai-console' version '2.16.0'
    id 'com.github.ben-manes.versions' version '0.51.0' // Gradle依赖更新
}

group = 'xin.vanilla'
version generateVersionCode()

repositories {
    maven { url 'https://maven.aliyun.com/repository/public' }
    maven { url "https://jitpack.io" }
    mavenCentral()
}

dependencies {
    // implementation 'net.mamoe.yamlkt:yamlkt-jvm:0.12.0'
    implementation 'org.xerial:sqlite-jdbc:3.46.1.3' // Sqlite依赖
    implementation 'com.almworks.sqlite4java:sqlite4java:1.0.392'// Sqlite REGEXP函数依赖

    implementation 'io.github.karlatemp:caller:1.1.1'
    implementation 'com.aventrix.jnanoid:jnanoid:2.0.0' // Nano ID, 替代UUID
    implementation 'com.github.yangtu222:BeanUtils:1.0.11' // Bean工具类, 复制Bean
    implementation 'com.alibaba.fastjson2:fastjson2-kotlin:2.0.53'
    implementation 'cn.hutool:hutool-all:5.8.32' // 一堆工具类
    implementation 'com.github.houbb:pinyin:0.4.0' // 拼音工具类
    implementation 'com.github.oshi:oshi-core:6.6.5' // 系统信息工具类
    implementation 'com.unfbx:chatgpt-java:1.1.5' // ChatGPT工具类
    implementation 'com.jayway.jsonpath:json-path:2.9.0' // JsonPath工具类
    implementation 'org.quartz-scheduler:quartz:2.3.2' // 定时任务库
    implementation 'xin.vanilla.rcon:rcon:1.2.1' // MC RCON依赖
    // implementation 'org.geysermc.mcprotocollib:protocol:1.20.6-1' // 用于与MC客户端/服务器通信的库
    implementation 'com.kennycason:kumo-core:1.28' // 词云
    implementation 'com.kennycason:kumo-tokenizers:1.28' // 词云


    testCompileOnly 'org.apiguardian:apiguardian-api:1.1.2'
    testImplementation 'junit:junit:4.13.2'

    compileOnly 'org.projectlombok:lombok:1.18.34'
    annotationProcessor 'org.projectlombok:lombok:1.18.34'
    testCompileOnly 'org.projectlombok:lombok:1.18.34'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.34'

}

tasks.withType(JavaCompile).configureEach {
    options.encoding = "UTF-8"
}

// 获取Git提交次数
static def getGitCommitCount() {
    def process = "git rev-list HEAD --count".execute()
    process.waitFor()
    return process.text.trim().toInteger()
}

// 生成版本号，拼接提交次数
static def generateVersionCode() {
    def versionName = "2.0.0-dev"
    def commitCount = getGitCommitCount()
    return "${versionName}.${commitCount}"
}

// 获取 Git 当前分支的哈希值并加入到配置
tasks.register("appendGitHashToFile") {
    doLast {
        def gitCommitHash = "git rev-parse --short HEAD".execute().text.trim()
        file('src/main/resources/hash').write("${gitCommitHash}")
        println "Version code: ${version}"
    }
}

tasks.register('updatePluginYmlVersion') {

    // 设置版本号
    def pluginVersion = generateVersionCode()

    doLast {
        // 指定 plugin.yml 文件的路径，根据实际情况进行调整
        def pluginYmlFile = file('src/main/resources/plugin.yml')

        // 读取 plugin.yml 文件的内容
        def pluginYmlContent = pluginYmlFile.text

        // 使用正则表达式替换版本号
        pluginYmlContent = pluginYmlContent.replaceAll(/(version:\s*)\S+/, "\$1'${pluginVersion}'")

        // 将修改后的内容写回到 plugin.yml 文件中
        pluginYmlFile.write(pluginYmlContent)

        // 输出修改后的版本号
        println "Updated version in plugin.yml: ${pluginVersion}"
    }
}

tasks.named('processResources') {
    dependsOn "updatePluginYmlVersion"
    dependsOn "appendGitHashToFile"
}
